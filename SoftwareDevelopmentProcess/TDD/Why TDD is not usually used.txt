Problem 1: Refactoring breaks many tests
If we make a small change to the implementation code, none of the tests would break.
That is one of the promises that TDD makes. In practice, at least a thousand tests break.
Something that should not happen happened. To fix that, we often rewrite, not refactor,
our test code. We spend a lot more time writing test code than the implementation code.

In the end, we doubt if it is worth rewriting the test code if we are sure we will refactor
the implementation code. Can we write fewer tests? Can we skip all the tests? Then, someone
will suggest writing tests when all changes are made, like the day before release.
In practice, it is often after release, or never.


Problem 2: Writing more test code than implementation code
To test a “unit” of the implementation code, we often write tests for all public methods and
write mocks for dependencies. Sometimes we make private methods public because otherwise there
is no way to increase our code coverage. We create test cases to cover as many different flows
of the implementation code as possible.

We end up being unproductive as we write more test code than the implementation code. Tests
will not be released and delivered to users. It makes more sense to skip tests as it seems to
speed up development.



Problem 3: Red-Green-Refactor encourages writing bad code
In a nutshell, Red-Green-Refactor means:
Write a test that fails, or doesn’t even compile
Write just enough implementation code to make the test pass
Refactor the implementation code

This approach could be problematic, especially to senior developers, because this is what it
really means in practice:
Write a test that fails, or doesn’t even compile
Write bad code to make the test pass, bad code that violates best practices
Refactor the bad code and rewrite, not refactor, the tests
This destroys our values as developers. It is almost a violation of programming ethics, illegal
and unprofessional.


Problem 4: Code coverage measurement
It is an old saying, “What gets measured gets done.” If quality is measured by code coverage,
developers will try every attempts to meet that minimum code coverage requirement.
If we are not allowed to ship when code coverage is below 85%, we will end up adding more and more tests,
usually those easiest to create, to make it just over 85% and no more.
Ironically, most of these tests are trivial and without much value to ensure quality. It shifts developer
to focus on finding ways to create low-quality tests just to hit the minimum code coverage target.


